import type { SVGProps } from "react";
import { sizeMap } from "../../metadata/sizing.js";
import type { IconProps } from "../types.js";

const IconFaceSatisfiedFilled = (props: IconProps & SVGProps<SVGSVGElement>) => {
	const size = sizeMap[props?.size ?? "m"];
	const label = props?.label ?? "Icon";

	switch (props?.size) {
		case "l":
			return (
				<svg
					viewBox="0 0 24 24"
					fill="currentColor"
					xmlns="http://www.w3.org/2000/svg"
					width={size}
					height={size}
					aria-label={label}
					role="img"
					{...props}
				>
					<path
						fillRule="evenodd"
						clipRule="evenodd"
						d="M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22ZM15.8119 15.2356C16.08 14.9198 16.0413 14.4465 15.7255 14.1785C15.4097 13.9104 14.9364 13.9492 14.6683 14.2649C14.34 14.6518 13.9315 14.9626 13.4711 15.1758C13.0107 15.3891 12.5095 15.4997 12.0021 15.5C11.4948 15.5003 10.9934 15.3903 10.5328 15.1776C10.0721 14.9649 9.66323 14.6546 9.33443 14.2682C9.06599 13.9527 8.59265 13.9146 8.27719 14.183C7.96173 14.4515 7.9236 14.9248 8.19204 15.2403C8.66176 15.7923 9.24588 16.2356 9.90394 16.5394C10.562 16.8433 11.2782 17.0004 12.0031 17C12.7279 16.9996 13.4439 16.8415 14.1016 16.5369C14.7593 16.2322 15.3429 15.7882 15.8119 15.2356ZM16.5 10.25C16.5 10.9404 15.9404 11.5 15.25 11.5C14.5596 11.5 14 10.9404 14 10.25C14 9.55964 14.5596 9 15.25 9C15.9404 9 16.5 9.55964 16.5 10.25ZM10 10.25C10 10.9404 9.44036 11.5 8.75 11.5C8.05964 11.5 7.5 10.9404 7.5 10.25C7.5 9.55964 8.05964 9 8.75 9C9.44036 9 10 9.55964 10 10.25Z"
					/>
				</svg>
			);
		default:
			return (
				<svg
					viewBox="0 0 20 20"
					fill="currentColor"
					xmlns="http://www.w3.org/2000/svg"
					width={size}
					height={size}
					aria-label={label}
					role="img"
					{...props}
				>
					<path
						fillRule="evenodd"
						clipRule="evenodd"
						d="M10 18C14.4183 18 18 14.4183 18 10C18 5.58172 14.4183 2 10 2C5.58172 2 2 5.58172 2 10C2 14.4183 5.58172 18 10 18ZM7.61994 11.8263C7.45183 11.6072 7.13796 11.5659 6.91888 11.734C6.6998 11.9021 6.65848 12.216 6.82659 12.435C7.20009 12.9218 7.68057 13.3161 8.23084 13.5875C8.78112 13.8589 9.38645 14 10 14C10.6136 14 11.2189 13.8589 11.7692 13.5875C12.3194 13.3161 12.7999 12.9218 13.1734 12.435C13.3415 12.216 13.3002 11.9021 13.0811 11.734C12.862 11.5659 12.5482 11.6072 12.3801 11.8263C12.0999 12.1914 11.7396 12.4871 11.3269 12.6906C10.9142 12.8941 10.4602 13 10 13C9.53984 13 9.08584 12.8941 8.67313 12.6906C8.26043 12.4871 7.90007 12.1914 7.61994 11.8263ZM8.5 8.5C8.5 9.05229 8.05229 9.5 7.5 9.5C6.94772 9.5 6.5 9.05229 6.5 8.5C6.5 7.94772 6.94772 7.5 7.5 7.5C8.05229 7.5 8.5 7.94772 8.5 8.5ZM12.5 9.5C13.0523 9.5 13.5 9.05229 13.5 8.5C13.5 7.94772 13.0523 7.5 12.5 7.5C11.9477 7.5 11.5 7.94772 11.5 8.5C11.5 9.05229 11.9477 9.5 12.5 9.5Z"
					/>
				</svg>
			);
	}
};

IconFaceSatisfiedFilled.iconName = "face-satisfied--filled";

export default IconFaceSatisfiedFilled;
